import axios from 'axios';

// 1. Use backend API URL from environment variable, with a fallback for local dev
const backendBaseURL = import.meta.env.VITE_API_URL || 'http://localhost:5000/api';
// Use the Render URL directly as requested
const apiBaseURL = 'https://sstraess.onrender.com/api';

console.log(`Axios configured with baseURL: ${apiBaseURL}`);

// Create the Axios instance
const api = axios.create({
  baseURL: apiBaseURL,
  // 2. Automatically include credentials (cookies for refresh token)
  withCredentials: true,
});

// --- Interceptors ---

// 5a. Request Interceptor: Attach the token before each request
api.interceptors.request.use(
  (config) => {
    // 3. Add Authorization header if token exists in localStorage
    const token = localStorage.getItem('accessToken');
    if (token) {
      config.headers['Authorization'] = `Bearer ${token}`;
      // console.log('Request Interceptor: Added Authorization header.'); // Optional: Debug log
    } else {
      console.log('Request Interceptor: No access token found in localStorage.');
    }
    return config;
  },
  (error) => {
    // 4. Log request errors
    console.error('Axios Request Error:', error);
    return Promise.reject(error);
  }
);

// 5b. Response Interceptor: Handle 401 errors and token refresh
api.interceptors.response.use(
  (response) => {
    // Any status code within the range of 2xx cause this function to trigger
    return response;
  },
  async (error) => {
    // Any status codes outside the range of 2xx cause this function to trigger
    const originalRequest = error.config;

    // Check specifically for 401 Unauthorized errors
    if (error.response?.status === 401 && !originalRequest._retry) {
      console.log('Response Interceptor: Received 401 Unauthorized.');
      originalRequest._retry = true; // Mark request to prevent infinite retry loops

      try {
        console.log('Response Interceptor: Attempting token refresh...');
        // Attempt to get a new access token using the refresh token (stored in HttpOnly cookie)
        const { data } = await api.post('/auth/refresh'); // Assumes refresh endpoint is /api/auth/refresh
        const newAccessToken = data.accessToken;

        if (newAccessToken) {
          console.log('Response Interceptor: Token refresh successful.');
          // Store the new token
          localStorage.setItem('accessToken', newAccessToken);
          // Update the Authorization header for the original request
          originalRequest.headers['Authorization'] = `Bearer ${newAccessToken}`;
          // Retry the original request with the new token
          console.log('Response Interceptor: Retrying original request.');
          return api(originalRequest);
        } else {
          // Should not happen if refresh endpoint works correctly, but handle just in case
          console.error('Response Interceptor: Refresh endpoint did not return accessToken.');
          localStorage.removeItem('accessToken'); // Clear invalid token
          // 5c. Redirect to login if refresh fails
          window.location.href = '/login'; // Force redirect
          return Promise.reject(error);
        }

      } catch (refreshError) {
        console.error('Response Interceptor: Token refresh failed.', refreshError.response?.data || refreshError.message);
        localStorage.removeItem('accessToken'); // Clear invalid token
        // 5c. Redirect to login if refresh fails
        // Check if the refresh error itself is a 401/403 (meaning refresh token is bad)
        if (refreshError.response?.status === 401 || refreshError.response?.status === 403) {
           window.location.href = '/login'; // Force redirect
        }
        return Promise.reject(refreshError);
      }
    }

    // 4. Log other response errors
    if (error.response) {
      console.error(
        `Axios Response Error: Status ${error.response.status}`,
        error.response.data
      );
    } else if (error.request) {
      console.error('Axios Response Error: No response received', error.request);
    } else {
      console.error('Axios Response Error: Setup error', error.message);
    }

    return Promise.reject(error);
  }
);

export default api;
